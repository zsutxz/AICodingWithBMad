# <!-- 由 BMAD™ Core 驱动 -->
template:
  id: prd-template-v2
  name: 产品需求文档
  version: 2.0
  output:
    format: markdown
    filename: docs/prd.md
    title: "{{project_name}} 产品需求文档 (PRD)"

workflow:
  mode: interactive
  elicitation: advanced-elicitation

sections:
  - id: goals-context
    title: 目标和背景
    instruction: |
      询问是否有项目简报 (Project Brief) 文档。如果没有，强烈建议首先使用 project-brief-tmpl 创建一个（它提供了基本的基础：问题陈述、目标用户、成功指标、MVP 范围、限制）。如果用户坚持在没有简报的情况下创建 PRD，则在“目标”部分收集这些信息。如果存在项目简报，请审阅并用它来填充“目标”（期望结果的要点列表）和“背景”（1-2 段关于此方案解决的问题和原因），以便我们确定 PRD MVP 的范围内外。无论哪种方式，这对于确定需求都至关重要。包括变更日志表。
    sections:
      - id: goals
        title: 目标
        type: bullet-list
        instruction: 如果成功，PRD 将交付的期望结果的单行要点列表 - 用户和项目的期望
      - id: background
        title: 背景
        type: paragraphs
        instruction: 1-2 个简短段落，总结背景，例如我们在简报中学到了什么，同时避免与目标重复，此方案解决的问题和原因，以及当前的状况或需求
      - id: changelog
        title: 变更日志
        type: table
        columns: [日期, 版本, 描述, 作者]
        instruction: 跟踪文档版本和变更

  - id: requirements
    title: 需求
    instruction: 在两个子部分下起草功能性和非功能性需求列表
    elicit: true
    sections:
      - id: functional
        title: 功能性
        type: numbered-list
        prefix: FR
        instruction: 每个需求都将是一个 Markdown 要点和一个以 FR 开头的标识符序列
        examples:
          - "FR6: 待办事项列表使用 AI 检测并警告措辞不同但可能重复的待办事项。"
      - id: non-functional
        title: 非功能性
        type: numbered-list
        prefix: NFR
        instruction: 每个需求都将是一个 Markdown 要点和一个以 NFR 开头的标识符序列
        examples:
          - "NFR1: AWS 服务使用必须力求在可行的情况下保持在免费套餐限制内。"

  - id: ui-goals
    title: 用户界面设计目标
    condition: PRD 具有 UX/UI 需求
    instruction: |
      捕获高层次的 UI/UX 愿景，以指导设计架构师并为故事 (story) 创建提供信息。步骤：

      1. 根据项目背景，用有根据的猜测预先填充所有子部分
      2. 将完整的渲染部分呈现给用户
      3. 清楚地告知用户在哪些地方做了假设
      4. 针对不清楚/缺失的元素或需要更具体说明的领域提出有针对性的问题
      5. 这不是详细的 UI 规范 - 专注于产品愿景和用户目标
    elicit: true
    choices:
      accessibility: [无, WCAG AA, WCAG AAA]
      platforms: [Web 响应式, 仅移动端, 仅桌面端, 跨平台]
    sections:
      - id: ux-vision
        title: 整体 UX 愿景
      - id: interaction-paradigms
        title: 关键交互范式
      - id: core-screens
        title: 核心屏幕和视图
        instruction: 从产品角度来看，交付 PRD 价值和目标所需的最关键的屏幕或视图是什么？这旨在提供概念性的高层次信息，以驱动粗略的史诗 (Epic) 或用户故事 (User Stories)
        examples:
          - "登录屏幕"
          - "主仪表板"
          - "项目详情页"
          - "设置页面"
      - id: accessibility
        title: "无障碍性: {无|WCAG AA|WCAG AAA|自定义需求}"
      - id: branding
        title: 品牌
        instruction: 是否有任何已知的品牌元素或风格指南必须被纳入？
        examples:
          - "复制 20 世纪初黑白电影的外观和感觉，包括在页面或状态转换期间模拟胶片损坏或投影仪故障的动画效果。"
          - "附件是我们公司品牌的完整调色板和设计元素 (tokens)。"
      - id: target-platforms
        title: "目标设备和平台: {Web 响应式|仅移动端|仅桌面端|跨平台}"
        examples:
          - "Web 响应式，以及所有移动平台"
          - "仅限 iPhone"
          - "ASCII Windows 桌面"

  - id: technical-assumptions
    title: 技术假设
    instruction: |
      收集将指导架构师的技术决策。步骤：

      1. 检查是否存在 {root}/data/technical-preferences.yaml 或附加的 technical-preferences 文件 - 用它来预填充选项
      2. 询问用户关于：语言、框架、入门模板、库、API、部署目标
      3. 对于未知项，根据项目目标和 MVP 范围提供指导
      4. 记录所有技术选择及其理由（为什么这个选择适合该项目）
      5. 这些将成为架构师的约束 - 要具体和完整
    elicit: true
    choices:
      repository: [Monorepo, Polyrepo]
      architecture: [单体 (Monolith), 微服务 (Microservices), 无服务器 (Serverless)]
      testing: [仅单元测试, 单元 + 集成测试, 完整测试金字塔]
    sections:
      - id: repository-structure
        title: "代码仓库结构: {Monorepo|Polyrepo|Multi-repo}"
      - id: service-architecture
        title: 服务架构
        instruction: "关键决策 - 记录高层次的服务架构（例如，单体、微服务、Monorepo 内的无服务器函数）。"
      - id: testing-requirements
        title: 测试需求
        instruction: "关键决策 - 记录测试需求，单元测试、集成测试、端到端测试、手动测试，以及是否需要方便手动测试的方法）。"
      - id: additional-assumptions
        title: 其他技术假设和请求
        instruction: 在起草本文档的整个过程中，如果提出或发现任何其他适合架构师的技术假设，请在此处作为附加要点添加

  - id: epic-list
    title: 史诗 (Epic) 列表
    instruction: |
      向用户呈现一个高层次的史诗列表以供批准。每个史诗都应该有一个标题和一个简短的（1 句话）目标陈述。这允许用户在深入细节之前审查整体结构。

      关键：史诗必须遵循敏捷最佳实践，逻辑上顺序排列：

      - 每个史诗都应交付一个重要的、端到端的、完全可部署的可测试功能增量
      - 史诗 1 必须建立基础项目基础设施（应用设置、Git、CI/CD、核心服务），除非我们正在向现有应用添加新功能，同时还要交付一个初始功能，即使只是一个健康检查路由或显示一个简单的金丝雀页面 - 在我们为第一个史诗制作故事时要记住这一点！
      - 每个后续的史诗都在先前史诗功能的基础上构建，交付在部署时为用户或业务提供切实价值的主要功能块
      - 并非每个项目都需要多个史诗，一个史诗需要交付价值。例如，一个已完成的 API 即使 UI 尚未完成并计划在单独的史诗中，也可以交付价值。
      - 倾向于使用较少的史诗，但要让用户知道你的理由，并提供拆分它们的选项，如果某些史诗看起来太大或专注于不同的事情。
      - 横切关注点 (Cross Cutting Concerns) 应该贯穿于史诗和故事中，而不是作为最终的故事。例如，在一个史诗的最后一个故事中添加日志框架，或者在项目结束时作为一个最终的史诗或故事，这将是糟糕的，因为我们从一开始就没有日志记录。
    elicit: true
    examples:
      - "史诗 1: 基础和核心基础设施：建立项目设置、身份验证和基本用户管理"
      - "史诗 2: 核心业务实体：通过 CRUD 操作创建和管理主要领域对象"
      - "史诗 3: 用户工作流和交互：启用关键用户旅程和业务流程"
      - "史诗 4: 报告和分析：为用户提供洞察和数据可视化"

  - id: epic-details
    title: 史诗 {{epic_number}} {{epic_title}}
    repeatable: true
    instruction: |
      史诗列表批准后，将每个史诗及其所有故事和验收标准作为一个完整的审查单元呈现。

      为每个史诗提供扩展的目标（2-3 句话描述所有故事将实现的目标和价值）。

      关键的故事排序要求：

      - 每个史诗中的故事必须逻辑上顺序排列
      - 除了项目基础的早期促成者 (enabler) 故事外，每个故事都应该是一个交付完整功能的“垂直切片”
      - 任何故事都不应依赖于后续故事或史诗的工作
      - 识别并注明任何直接的先决故事
      - 专注于“什么”和“为什么”，而不是“如何”（将技术实现留给架构师），但要足够精确以支持从一个故事到另一个故事的逻辑顺序操作。
      - 确保每个故事都提供明确的用户或业务价值，尽量避免促成者 (enablers)，并将它们构建到交付价值的故事中。
      - 为 AI agent 执行确定故事的大小：每个故事必须能由单个 AI agent 在一个专注的会话中完成，而不会出现上下文溢出
      - 想象“一个初级开发人员工作 2-4 小时” - 故事必须小、专注且自成一体
      - 如果一个故事看起来很复杂，只要它能交付一个垂直切片，就进一步分解它
    elicit: true
    template: "{{epic_goal}}"
    sections:
      - id: story
        title: 故事 {{epic_number}}.{{story_number}} {{story_title}}
        repeatable: true
        template: |
          作为一个 {{user_type}},
          我想要 {{action}},
          以便于 {{benefit}}.
        sections:
          - id: acceptance-criteria
            title: 验收标准
            type: numbered-list
            item_template: "{{criterion_number}}: {{criteria}}"
            repeatable: true
            instruction: |
              定义清晰、全面且可测试的验收标准，这些标准：

              - 从功能角度精确定义“完成”的含义
              - 明确无误，并作为验证的基础
              - 包括 PRD 中的任何关键非功能性需求
              - 考虑后端/数据组件的本地可测试性
              - 在适用时指定 UI/UX 需求和框架遵守情况
              - 避免应在其他故事或 PRD 部分中的横切关注点

  - id: checklist-results
    title: 清单结果报告
    instruction: 在运行清单并起草提示之前，主动提出输出完整的更新后 PRD。如果输出，请与用户确认您将继续运行清单并生成报告。一旦用户确认，执行 pm-checklist 并在本节中填充结果。

  - id: next-steps
    title: 后续步骤
    sections:
      - id: ux-expert-prompt
        title: UX 专家提示
        instruction: 本节将包含给 UX 专家的提示，保持简短扼要，以启动使用本文档作为输入的创建架构模式。
      - id: architect-prompt
        title: 架构师提示
        instruction: 本节将包含给架构师的提示，保持简短扼要，以启动使用本文档作为输入的创建架构模式。
